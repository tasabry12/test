/*                   Copyright (c) 2007 Venere Net S.p.A.
 *                             All Rights Reserved
 *
 * This software is the confidential and proprietary information of
 * Venere Net S.p.A. ("Confidential  Information"). You  shall not disclose
 * such  Confidential Information and shall use it only in accordance with
 * the terms  of the license agreement you entered into with Venere Net S.p.A.
 *
 * VENERE NET S.P.A. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * OR NON-INFRINGEMENT. VENERE NET S.P.A. SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS
 * SOFTWARE OR ITS DERIVATIVES.
 */
package com.venere.ace.dao;

import com.venere.ace.exception.EHandlerException;
import com.venere.ace.idtos.ICommandRequestDTO;
import com.venere.ace.interfaces.IWaiterTaskHandler;
import com.venere.ace.utility.ScreenUtil;
import com.venere.ace.utility.WebDriverUtil;
import org.openqa.selenium.*;
import org.openqa.selenium.remote.UnreachableBrowserException;

/**
 *
 * @author fcastaldi
 */
public class WebDriverWaiterMobile
        extends WebDriverWaiter
        implements IWaiterTaskHandler {
 
   private WebDriverUtil driverUtil ;

   public void setDriverUtil(WebDriverUtil driverUtil) {
      this.driverUtil = driverUtil;
   }
   public WebDriverWaiterMobile() {
      super();
   }


   @Override
   public void waitBookingBar(ICommandRequestDTO obj)
           throws EHandlerException {
      try {
         By oElement = getWebElement(obj);
         boolean boTryAgain = true;
         long lStartingTime = System.currentTimeMillis();
         do {
            try {               
               oBrowser.findElement(oElement);
               boTryAgain = true;

            } catch (NoSuchElementException | ElementNotVisibleException ex) {
               boTryAgain = false;            
            } catch (StaleElementReferenceException | UnreachableBrowserException e) {
               manageException(obj, e);
               boTryAgain = false;
            }

         } while (boTryAgain && (System.currentTimeMillis() - lStartingTime < iMaxDelay));

      } catch (RuntimeException ex) {
         ScreenUtil oScreenUtil = new ScreenUtil(oBrowser);
         oScreenUtil.makeAPrintScreen(obj.getTaskName());
         String sMessage = ex.getMessage();
         oLogger.error(sMessage);
         throw new EHandlerException(EHandlerException.HandlerErrorCode.ACTION_TASK, sMessage, ex);
      }

   }

   public void waitElementDisappear(ICommandRequestDTO obj)
           throws EHandlerException {
      try {
         By oElement = getWebElement(obj);
         boolean boTryAgain = true;
         long lStartingTime = System.currentTimeMillis();
         do {
            try {
               WebElement oElem = oBrowser.findElement(oElement);
               if (!oElem.isDisplayed()) {
                  boTryAgain = false;
               }
            } catch (NoSuchElementException | ElementNotVisibleException ex) {
               boTryAgain = false;
            } catch (StaleElementReferenceException | UnreachableBrowserException e) {
               oLogger.warn(obj.getTaskName() + " - Managed Exception: " + e.getClass());
               driverUtil.waitFor(10000);
            }

         } while (boTryAgain && (System.currentTimeMillis() - lStartingTime < iMaxDelay));

      } catch (RuntimeException ex) {
         ScreenUtil oScreenUtil = new ScreenUtil(oBrowser);
         oScreenUtil.makeAPrintScreen(obj.getTaskName());
         String sMessage = ex.getMessage();
         oLogger.error(sMessage);
         throw new EHandlerException(EHandlerException.HandlerErrorCode.ACTION_TASK, sMessage, ex);
      }

   }

   private void manageException(ICommandRequestDTO obj, Exception e) {
      oLogger.warn(obj.getTaskName() + " - Managed Exception: " + e.getClass());
      driverUtil.waitFor(3000);
   }
}
