/*                   Copyright (c) 2007 Venere Net S.p.A.
 *                             All Rights Reserved
 *
 * This software is the confidential and proprietary information of
 * Venere Net S.p.A. ("Confidential  Information"). You  shall not disclose
 * such  Confidential Information and shall use it only in accordance with
 * the terms  of the license agreement you entered into with Venere Net S.p.A.
 *
 * VENERE NET S.P.A. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * OR NON-INFRINGEMENT. VENERE NET S.P.A. SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS
 * SOFTWARE OR ITS DERIVATIVES.
 */
package com.venere.ace.bl.loaders;

import com.venere.ace.abstracts.AExecutor;
import com.venere.ace.abstracts.AScenarioLoader;
import com.venere.ace.dtos.MetaplanCommadRequestDTO;
import com.venere.ace.exception.ELoaderIO;
import com.venere.ace.interfaces.ICommandExecutor;
import com.venere.ace.utility.EnumScenarioTask;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

/**
 *
 * @author quatrini
 */
public class ScenarioLoader extends AScenarioLoader {

   private AExecutor oCurrentScenario;
   private MetaplanCommadRequestDTO oCurrentMetaplanRequestDTO;

   @Override
   public void startDocument() throws SAXException {
   }

   @Override
   public void endDocument() throws SAXException {
   }

   @Override
   public void startElement(String namespaceURI, String localName, String qName, Attributes atts) {
      contents.reset();

      if (localName.equals("import")) {
         oCurrentScenario = new AExecutor("ScenarioTask");
         oCurrentMetaplanRequestDTO = new MetaplanCommadRequestDTO();
         try {
            oCurrentScenario.setTaskId(EnumScenarioTask.IMPORT);
         } catch (IllegalArgumentException ex) {
            String sMessage = "Unknown task " + EnumScenarioTask.IMPORT;
            throw new ELoaderIO(ELoaderIO.LoaderErrorCode.TASK_UNKNOWN, sMessage, ex);
         }

         List<ICommandExecutor> oTestExecutor = null;
         if (atts.getLength() != 0) {

            String sCurrentMetaplanId = getValue(atts.getValue("metaPlanId"));
            if (!isValidAttribute(sCurrentMetaplanId)) {
               sCurrentMetaplanId = "UnknownMetaplan";
            }

            oCurrentScenario.setDependOfCondition(atts.getValue("condition"));

            oCurrentScenario.setTaskDescription(sCurrentMetaplanId);

            if (oTestInjected != null) {
               oTestExecutor = (List<ICommandExecutor>) oTestInjected.get(sCurrentMetaplanId);
            }

            String sPropertiesFilePath = atts.getValue("propertiesConf");

            List<Properties> oList = new ArrayList<>();
            if (oPropertiesInjected != null) {
               Properties oTemp = (Properties) oPropertiesInjected.get(sCurrentMetaplanId);
               if (oTemp != null) {
                  oList.add(oTemp);
               }
            }
            oList.add(oCurrentProperties);
            oList.add(addPropertiesFiles(getValue(sPropertiesFilePath)));

            oCurrentMetaplanRequestDTO.setPropertiesFile(mergPropertiesFile(oList));
            oCurrentMetaplanRequestDTO.setMetaplanname(sCurrentMetaplanId);

            boolean boIsOptional = Boolean.valueOf(atts.getValue("optional")).booleanValue();
            oCurrentMetaplanRequestDTO.setIsOptional(boIsOptional);

            oCurrentScenario.setRequest(oCurrentMetaplanRequestDTO);
            oCurrentScenario.setHandler(oScenarioTaskHandler);

         }
         oCommandExecutor.add(oCurrentScenario);

         if (oTestExecutor != null) {
            oCommandExecutor.addAll(oTestExecutor);
         }
      }

   }

   @Override
   public void endElement(String namespaceURI,
           String localName,
           String qName) throws SAXException {

      if (localName.equals("imports")) {
         oCurrentScenario = new AExecutor("ScenarioTask");
         oCurrentMetaplanRequestDTO = new MetaplanCommadRequestDTO();
         oCurrentMetaplanRequestDTO.setPropertiesFile(new Properties());
         oCurrentMetaplanRequestDTO.setMetaplanname("m_closeSession");
         try {
            oCurrentScenario.setTaskId(EnumScenarioTask.IMPORT);
         } catch (IllegalArgumentException ex) {
            String sMessage = "Unknown task " + EnumScenarioTask.IMPORT;
            throw new ELoaderIO(ELoaderIO.LoaderErrorCode.TASK_UNKNOWN, sMessage, ex);
         }
         oCurrentScenario.setRequest(oCurrentMetaplanRequestDTO);
         oCurrentScenario.setHandler(oScenarioTaskHandler);
         oCommandExecutor.add(oCurrentScenario);

      }
   }

   private boolean isValidAttribute(String sAttributeValid) {
      boolean boResult = true;
      if (sAttributeValid == null || sAttributeValid.isEmpty()) {
         boResult = false;
      }
      return boResult;
   }
}
