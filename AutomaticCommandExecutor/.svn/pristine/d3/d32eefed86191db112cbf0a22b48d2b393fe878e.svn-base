/*                   Copyright (c) 2007 Venere Net S.p.A.
 *                             All Rights Reserved
 *
 * This software is the confidential and proprietary information of
 * Venere Net S.p.A. ("Confidential  Information"). You  shall not disclose
 * such  Confidential Information and shall use it only in accordance with
 * the terms  of the license agreement you entered into with Venere Net S.p.A.
 *
 * VENERE NET S.P.A. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * OR NON-INFRINGEMENT. VENERE NET S.P.A. SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS
 * SOFTWARE OR ITS DERIVATIVES.
 */

package com.venere.utils.test.bl;

import com.venere.ace.dtos.ATaskResultDTO;
import com.venere.ace.idtos.ITestRequestDTO;
import com.venere.ace.interfaces.ICommandResult;
import com.venere.utils.dto.SnapInfoDTO;
import java.io.File;
import java.util.List;
import java.util.Map;
import org.apache.commons.io.FileUtils;


/**
 *
 * @author quatrini
 */
public class SnapperBL   extends AClassTestBL  {
    
   private int iStartingflag = 4;
   private int iNumberOfMVT  = 9;
 
   public SnapperBL(){super("SnapperBL");}

   public Map<String, Object> getMapResultContainer() 
   {
      return oMapResultContainer;
   }

  
   public ICommandResult makeSnap(ITestRequestDTO oTest) {
      ATaskResultDTO oResult = new ATaskResultDTO("SnapperTaskResult");
      oResult.setIsCorrect(true);
      String sPrintScreenReference = (String) oTest.getInputDataList().get(0);
      String sLocationToStore      = (String) oTest.getInputDataList().get(1);
      String sBrowser              = (String) oTest.getInputDataList().get(2);
      String sTestCaseFolding      = (String) oTest.getInputDataList().get(3);
      SnapInfoDTO oSnapDTO         = (SnapInfoDTO) oMapResultContainer.get(sPrintScreenReference);
      String sS = System.getProperty("com.venere.ace.counter");
      if (sS == null){
          sS = "001";
      }
      String sTestCaseFolder ="";
      String sCurrentTestCase = System.getProperty("com.venere.ace.currentTestCase");
      
      if (Boolean.valueOf(sTestCaseFolding)){
          sTestCaseFolder = sCurrentTestCase+"\\";
      }else{
         // Per mantenere la compatibilita con l'assenza del flag 
         if (!sTestCaseFolding.toLowerCase().equals("false")){
            iStartingflag = 3;     
         }
      }
      try {
          FileUtils.moveFile(new File(oSnapDTO.getPathSnap()+"\\"+oSnapDTO.getSnapName()), new File(sLocationToStore+"\\"+sBrowser+"\\"+extractMvtSelection(oTest.getInputDataList())+"\\"+sTestCaseFolder+nameFile(oSnapDTO.getSnapName(), sS)));
      } catch (Throwable ex) {
          oLogger.error(ex);
      }
     String sSnapName = oSnapDTO.getSnapName().replace(sCurrentTestCase, sCurrentTestCase+"_FULL");
     try {
          FileUtils.moveFile(new File(oSnapDTO.getPathSnap()+"\\"+sSnapName), new File(sLocationToStore+"\\"+sBrowser+"\\"+extractMvtSelection(oTest.getInputDataList())+"\\"+sTestCaseFolder+nameFile(sSnapName, sS)));
      } catch (Throwable ex) {
          oLogger.error(ex);
      }
     System.setProperty("com.venere.ace.counter", counterManager(sS));
      
      return oResult;
  }
   
   private String extractMvtSelection(List oListVariables){
       
      StringBuilder oMvtSelection =  new StringBuilder("");
      for (int i = iStartingflag; i < iStartingflag+iNumberOfMVT; i++) {
         oMvtSelection.append( getValue((String) oListVariables.get(i)));
      }
      return oMvtSelection.toString();
   }
   private String  getValue(String sValue){
       String sResult= sValue;
       if(sResult.isEmpty()){
           sResult ="O";
       }
       return sResult;
   }
   
   private String nameFile(String sName,String sCounter)
   {
       String[] sSplitted = sName.split("\\.");
       return sSplitted[0]+"_"+sCounter+"."+sSplitted[1];
       
   }
   
   private String counterManager(String sActualCounter)
   {
        if(sActualCounter.startsWith("00")){
            sActualCounter = sActualCounter.substring(2);
        }
        if(sActualCounter.startsWith("0")){
            sActualCounter = sActualCounter.substring(1);
        }
        Integer iCounter = Integer.valueOf(sActualCounter);
        iCounter++;
        sActualCounter = "000"+iCounter.toString();
        return sActualCounter.substring(sActualCounter.length()-3);
   }
}