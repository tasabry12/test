/*                   Copyright (c) 2007 Venere Net S.p.A.
 *                             All Rights Reserved
 *
 * This software is the confidential and proprietary information of
 * Venere Net S.p.A. ("Confidential  Information"). You  shall not disclose
 * such  Confidential Information and shall use it only in accordance with
 * the terms  of the license agreement you entered into with Venere Net S.p.A.
 *
 * VENERE NET S.P.A. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * OR NON-INFRINGEMENT. VENERE NET S.P.A. SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS
 * SOFTWARE OR ITS DERIVATIVES.
 */
package com.venere.ace.dao;

import com.venere.ace.abstracts.AException;
import com.venere.ace.abstracts.AHandler;
import com.venere.ace.dtos.ATaskResultDTO;
import com.venere.ace.dtos.ConfigurationDTO;
import com.venere.ace.exception.EHandlerException;
import com.venere.ace.exception.EManagerException;
import com.venere.ace.idtos.IConfigurationDTO;
import com.venere.ace.interfaces.ICommandResult;
import com.venere.ace.utility.Constants;
import com.venere.ace.utility.FolderManager;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author quatrini
 */
public class TestHandler extends AHandler {

   public TestHandler(String sClassName) {
      super(sClassName);
   }

   public TestHandler() {
      super("TestPlanHandler");
   }

   public ICommandResult performTest(IConfigurationDTO oConfiguration) throws EHandlerException {

      ATaskResultDTO testResult;
      String sMessage = "Test Handler failure performing ";
      try {
         sMessage = sMessage + oManager.toString();
         List<ICommandResult> oResultList = oManager.manager(oConfiguration);
         testResult = (ATaskResultDTO) aggregateResult(oResultList, new ATaskResultDTO("TestSuiteTaskResult"), "Test executed");

      } catch (EManagerException ex) {
         oLogger.error(sMessage + " - " + ex.getCause());

         testResult = new ATaskResultDTO("TestSuiteTaskResult");
         testResult.setIsCorrect(false);
         testResult.setMessage(sMessage );

      } catch (Exception ex) {
         
         oLogger.error(sMessage + " - " + ex.getCause());
         throw  new EHandlerException(EHandlerException.HandlerErrorCode.TESTPLAN_TASK,sMessage, ex); 

      }

      return testResult;

   }

   public ICommandResult closeAll(IConfigurationDTO obj) throws EHandlerException {

      ATaskResultDTO scenarioResult = null;
      ConfigurationDTO oConfigurationDTO = new ConfigurationDTO();
      try {
         Map confAdds = new HashMap();

         confAdds.put(Constants.CONDITION_TAG, Constants.CONDITION_STOP);
         oConfigurationDTO.setConfigurationAdds(confAdds);
         oConfigurationDTO.setMainProps(obj.getMainProps());
         oConfigurationDTO.setPathFileToLoad(FolderManager.ScenariousFolder + "s_CloseSession.xml");

         List<ICommandResult> oResultList = oManager.manager(oConfigurationDTO);
         scenarioResult = (ATaskResultDTO) aggregateResult(oResultList, new ATaskResultDTO("TestSuiteTaskResult"), "Test executed");
      } catch (Exception ex) {
         String sMessage = "Scenario Execution Failed ";
         oLogger.error(sMessage);
         EHandlerException oErrorPerforming = new EHandlerException(EHandlerException.HandlerErrorCode.ACTION_TASK,sMessage,  ex.getCause());
         oErrorPerforming.setExceptionResult(((AException) ex.getCause()).getExceptionResult());
         throw oErrorPerforming;
      }
      return scenarioResult;
   }
}
