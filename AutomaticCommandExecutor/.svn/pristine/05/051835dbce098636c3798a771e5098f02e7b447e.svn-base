/*                   Copyright (c) 2007 Venere Net S.p.A.
 *                             All Rights Reserved
 *
 * This software is the confidential and proprietary information of
 * Venere Net S.p.A. ("Confidential  Information"). You  shall not disclose
 * such  Confidential Information and shall use it only in accordance with
 * the terms  of the license agreement you entered into with Venere Net S.p.A.
 *
 * VENERE NET S.P.A. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * OR NON-INFRINGEMENT. VENERE NET S.P.A. SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS
 * SOFTWARE OR ITS DERIVATIVES.
 */

package com.venere.ace.interfaces;

import com.venere.ace.abstracts.AHandler;
import com.venere.ace.exception.EExecutorException;

import com.venere.ace.utility.IEnum;

/**
 *
 * @author quatrini
 */
public interface ICommandExecutor<IHandler,IRequest >  {

   public void setPostTask(ICommandExecutor oPostAction);

   public void setPreTask(ICommandExecutor oPostAction) ;

   public <IHandler> void setHandler(IHandler oBrowser) ;
   
   public  AHandler getHandler() ;

   public void setRequest(IRequest oRequest);
   
   public IRequest getRequest();

   public void setTaskId(IEnum oTaskName);

   public void setClassName(String sClassName);
   
   public String getClassName();
   
   public ICommandResult checkPreCondition()     throws EExecutorException;

   public ICommandResult checkPostCondition()      throws EExecutorException;

   public ICommandResult doTask()         throws EExecutorException;

   public void           validate()       throws EExecutorException;
   
   public String getTaskDescription() ;

   public void setTaskDescription(String sTaskDescription);
   
   public ICommandResult terminate() throws EExecutorException;
   
   public IDiagnostic getDiagnostic() ;

   public void setDiagnostic(IDiagnostic oDiagnostic) ;
   
   public boolean evaluateCondition();

 
}
