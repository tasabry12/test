/*                   Copyright (c) 2007 Venere Net S.p.A.
 *                             All Rights Reserved
 *
 * This software is the confidential and proprietary information of
 * Venere Net S.p.A. ("Confidential  Information"). You  shall not disclose
 * such  Confidential Information and shall use it only in accordance with
 * the terms  of the license agreement you entered into with Venere Net S.p.A.
 *
 * VENERE NET S.P.A. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * OR NON-INFRINGEMENT. VENERE NET S.P.A. SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS
 * SOFTWARE OR ITS DERIVATIVES.
 */
package com.venere.ace.bl.loaders;

import com.venere.ace.abstracts.ACommandLoader;
import com.venere.ace.abstracts.AExecutor;
import com.venere.ace.dtos.SeleniumCommadRequestDTO;
import com.venere.ace.exception.ELoaderIO;
import com.venere.ace.interfaces.ICommandExecutor;
import com.venere.ace.utility.DateUtil;
import com.venere.ace.utility.EnumBrowserTask;
import com.venere.ace.utility.EnumBrowserTaskCondition;
import com.venere.utils.test.bl.DiagnosticHelper;
import java.util.Map;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

/**
 *
 * @author quatrini
 */
public class ActionLoader extends ACommandLoader {
   
   private AExecutor oCurrentAction;
   private AExecutor oCurrentPostActionTask;
   private AExecutor oCurrentPreActionTask;
   private SeleniumCommadRequestDTO oCurrentRequestSelenium;   
   private String sCurrentTaskName;
   private String sCurrentPostTaskName;
   private Map oMapValues;
   private String sCurrentValue;
   private String sDataType = "";
   private String sDateFormat = "dd/MM/yyyy";
   
   @Override
   public void startElement(String namespaceURI, String localName, String qName, Attributes atts) {
      contents.reset();
      
      if (localName.equals("postAction")) {
         oCurrentPostActionTask = new AExecutor("PostActionTask");
         oCurrentAction.setPostTask(oCurrentPostActionTask);
         oCurrentPostActionTask.setHandler(oCurrentWaiterBrowser);
         
         sCurrentPostTaskName = "";
         SeleniumCommadRequestDTO oCurrentPostRequestSelenium = new SeleniumCommadRequestDTO();
         if (atts.getLength() != 0) {
            sCurrentPostTaskName = atts.getValue("name");
            if (isEmptyAttribute(sCurrentPostTaskName)) {
               sCurrentPostTaskName = "UnknownPostAction";
            }
            oCurrentPostActionTask.setTaskId(EnumBrowserTaskCondition.valueOf(sCurrentPostTaskName.trim().toUpperCase()));
                        
            String sPostActionLocator = atts.getValue("objectLocator");
            if (isEmptyAttribute(sPostActionLocator)) {
               sPostActionLocator = "UnknownLocator";
            }
            oCurrentPostRequestSelenium.setLocatorType(sPostActionLocator);
            
            String sPostActionLocation = atts.getValue("objectLocation");
            if (isEmptyAttribute(sPostActionLocation)) {
               sPostActionLocation = "UnknownLocation";
            }
            oCurrentPostRequestSelenium.setLocationElement(sPostActionLocation);
            
            String sPostActionValue = atts.getValue("objectValue");
            if (isEmptyAttribute(sPostActionValue)) {
               sPostActionValue = "UnknownValue";
            }
            oCurrentPostRequestSelenium.setValue(sPostActionValue);
            oCurrentPostActionTask.setRequest(oCurrentPostRequestSelenium);
            DiagnosticHelper oDiagnostic = new DiagnosticHelper();
            oDiagnostic.setBrowser(oCurrentBrowser);
            oCurrentPostActionTask.setDiagnostic(oDiagnostic);
            
         }
         
      }
      
      if (localName.equals("preAction")) {
         oCurrentPreActionTask = new AExecutor("PreActionTask");
         oCurrentAction.setPreTask(oCurrentPreActionTask);
         oCurrentPreActionTask.setHandler(oCurrentWaiterBrowser);
         
         sCurrentPostTaskName = "";
         SeleniumCommadRequestDTO oCurrentPostRequestSelenium = new SeleniumCommadRequestDTO();
         if (atts.getLength() != 0) {
            sCurrentPostTaskName = atts.getValue("name");
            if (isEmptyAttribute(sCurrentPostTaskName)) {
               sCurrentPostTaskName = "UnknownPostAction";
            }
            oCurrentPreActionTask.setTaskId(EnumBrowserTaskCondition.valueOf(sCurrentPostTaskName.trim().toUpperCase()));
                      
            String sPostActionLocator = atts.getValue("objectLocator");
            if (isEmptyAttribute(sPostActionLocator)) {
               sPostActionLocator = "UnknownLocator";
            }
            oCurrentPostRequestSelenium.setLocatorType(sPostActionLocator);
            
            String sPostActionLocation = atts.getValue("objectLocation");
            if (isEmptyAttribute(sPostActionLocation)) {
               sPostActionLocation = "UnknownLocation";
            }
            oCurrentPostRequestSelenium.setLocationElement(sPostActionLocation);
            
            String sPostActionValue = atts.getValue("objectValue");
            if (isEmptyAttribute(sPostActionValue)) {
               sPostActionValue = "UnknownValue";
            }
            oCurrentPostRequestSelenium.setValue(sPostActionValue);
            oCurrentPreActionTask.setRequest(oCurrentPostRequestSelenium);
            
            DiagnosticHelper oDiagnostic = new DiagnosticHelper();
            oDiagnostic.setBrowser(oCurrentBrowser);
            oCurrentPreActionTask.setDiagnostic(oDiagnostic);
            
         }
         
      }
      
      if (localName.equals("value")) {
         if (atts.getLength() != 0) {
            sCurrentValue = atts.getValue("name");
            if (isEmptyAttribute(sCurrentValue)) {
               sCurrentValue = "UnknownAction";
            }
         }
      }
      
      if (localName.equals("stepplan")) {
         oCurrentAction = new AExecutor("ActionTask");
         oCurrentAction.setDependOfCondition(atts.getValue("condition"));
      }
      
      if (localName.equals("action")) {
         
         oCurrentRequestSelenium = new SeleniumCommadRequestDTO();
         
         sCurrentTaskName = "";
         if (atts.getLength() != 0) {
            sCurrentTaskName = atts.getValue("name");
            if (isEmptyAttribute(sCurrentTaskName)) {
               sCurrentTaskName = "UnknownAction";
            }
            oCurrentAction.setTaskDescription(sCurrentTaskName);
            
            createPrePostAction(atts.getValue("preAction"), "PreActionTask");
            createPrePostAction(atts.getValue("postAction"), "PostActionTask");
            
         }
      }
      
      if (localName.equals("plansteps")) {
         if (atts.getLength() != 0) {
            sNameContext = atts.getValue("name");
            String sFileProperties = "";
            String sPropertiesName = atts.getValue("currentProps");
            sFileProperties = getValue(sPropertiesName);
            if (sFileProperties != null && !sFileProperties.isEmpty()) {
               try {
                  mergeWithCurrentProps(addPropertiesFiles(sFileProperties));
               } catch (ELoaderIO ex) {
                  oLogger.error("Merging file properties failed " + ex);
               }
            }
            sFileProperties = atts.getValue("defaultprops");
            if (sFileProperties != null && !sFileProperties.isEmpty()) {
               try {
                  oDefaultProperties = addPropertiesFiles(sFileProperties);
               } catch (ELoaderIO ex) {
                  oLogger.error("Adding property into list failed " + ex);
               }
            }
         }
      }
      
      if (localName.equals("objectValue")) {
         if (atts.getLength() != 0) {
            sDataType = getValue(atts.getValue("dataType"));
            sDateFormat = getValue(atts.getValue("dataFormat"));
            if (sDateFormat.equals("")) {
               sDateFormat = "dd/MM/yyyy";
            }
         }
      }
   }
   
   @Override
   public void endElement(String namespaceURI,
           String localName,
           String qName) throws SAXException {
      
      if (localName.equals("action")) {
         oCommandExecutor.add((ICommandExecutor) oCurrentAction);
      }
      
      if (localName.equals("actionName")) {
         try {
            oCurrentAction.setTaskId(EnumBrowserTask.valueOf(contents.toString().trim().toUpperCase()));
         } catch (IllegalArgumentException ex) {
            String sMessage = "Unknown task " + contents.toString().trim().toUpperCase();
            throw new ELoaderIO(ELoaderIO.LoaderErrorCode.TASK_UNKNOWN, sMessage, ex);
         }
         
         oCurrentAction.setHandler(oCurrentBrowser);
         oCurrentAction.setRequest(oCurrentRequestSelenium);
         DiagnosticHelper oDiagnostic = new DiagnosticHelper();
         oDiagnostic.setBrowser(oCurrentBrowser);
         oCurrentAction.setDiagnostic(oDiagnostic);
         oCurrentRequestSelenium.setTaskName(sCurrentTaskName);
      }
      
      if (localName.equals("objectLocator") && !contents.toString().equals("")) {
         oCurrentRequestSelenium.setLocatorType(getValue(contents.toString().trim()));
      }
      
      
      if (localName.equals("value") && !contents.toString().equals("")) {
         oMapValues.put(sCurrentValue, getValue(contents.toString().trim()));
      }
      
      if (localName.equals("type") && !contents.toString().equals("")) {
         
         oCurrentPostActionTask.setTaskId(EnumBrowserTaskCondition.URL);
      }
      
      if (localName.equals("objectLocation") && !contents.toString().equals("")) {
         String sValue = getValue(contents.toString().trim());
         oCurrentRequestSelenium.setLocationElement(sValue);
      }
      
      if (localName.equals("objectValue") && !contents.toString().equals("")) {
         String sValue = getValue(contents.toString().trim());
         
         if (sDataType.equals("date")) {            
            if (sValue != null && !("").equals(sValue)) {
               sValue = DateUtil.getDataValue(sValue, sDateFormat);
            }
            
            sDataType = "";
         }
         oCurrentRequestSelenium.setValue(sValue);
      }
      
      if (localName.equals("delayMilliSecond") && !contents.toString().equals("")) {
         String sValue = getValue(contents.toString().trim());
         try {
            oCurrentRequestSelenium.setDelayMillisecond(Integer.valueOf(sValue));
         } catch (NumberFormatException ex) {
            oLogger.error("delayMilliSecond error Setting for values " + sValue + " will set 0 millisecond of delay");
            oCurrentRequestSelenium.setDelayMillisecond(0);
         }
      }
      
      
   }
   
   private boolean isEmptyAttribute(String sAttributeValid) {
      boolean boResult = false;
      if (sAttributeValid == null || sAttributeValid.isEmpty()) {
         boResult = true;
      }
      return boResult;
   }
   
   private void createPrePostAction(String sCurrentPostActionTaskName, String sActionTask) {
      
      if (sCurrentPostActionTaskName != null) {
         oCurrentPostActionTask = new AExecutor(sActionTask);
         oCurrentAction.setPostTask(oCurrentPostActionTask);
         oCurrentPostActionTask.setHandler(oCurrentWaiterBrowser);
         oCurrentPostActionTask.setTaskId(EnumBrowserTaskCondition.valueOf(sCurrentPostActionTaskName.trim().toUpperCase()));
         oCurrentPostActionTask.setRequest(oCurrentRequestSelenium);
//        oCurrentPreActionTask.setTaskDescription(sCurrentTaskName);
      }
   }
}
